// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name Keyri
import AVFoundation
import SystemConfiguration.CaptiveNetwork
import CommonCrypto
import CoreTelephony
import CryptoKit
import Foundation
import LocalAuthentication
import Network
import ObjectiveC
import Security
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers public class UserParameters : ObjectiveC.NSObject, Swift.Codable {
  @objc public var base64EncodedData: Swift.String?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class GeoDataPair : ObjectiveC.NSObject, Swift.Codable {
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class KeyriObjC : ObjectiveC.NSObject {
  @available(*, deprecated, message: "Use init with detectionsConfig argument instead")
  @objc override dynamic public init()
  @objc public init(appKey: Swift.String, publicApiKey: Swift.String?, serviceEncryptionKey: Swift.String?, detectionsConfig: Keyri.KeyriDetectionsConfig = KeyriDetectionsConfig())
  @available(*, deprecated, message: "Use init with detectionsConfig argument instead")
  @objc public func initializeKeyri(appKey: Swift.String, publicApiKey: Swift.String?, serviceEncryptionKey: Swift.String?, blockEmulatorDetection: Swift.Bool = true)
  @objc public func easyKeyriAuth(payload: Swift.String, publicUserId: Swift.String, completion: @escaping (Swift.Bool, (any Swift.Error)?) -> ())
  @objc public func generateAssociationKey(publicUserId: Swift.String?, completion: @escaping (Swift.String?, (any Swift.Error)?) -> ())
  @objc public func generateUserSignature(publicUserId: Swift.String?, data: Foundation.Data, completion: @escaping (Swift.String?, (any Swift.Error)?) -> ())
  @objc public func listAssociationKeys(completion: @escaping ([Swift.String : Swift.String]?, (any Swift.Error)?) -> ())
  @objc public func listUniqueAccounts(completion: @escaping ([Swift.String : Swift.String]?, (any Swift.Error)?) -> ())
  @objc public func getAssociationKey(publicUserId: Swift.String?, completion: @escaping (Swift.String?, (any Swift.Error)?) -> ())
  @objc public func removeAssociationKey(publicUserId: Swift.String, completion: @escaping ((any Swift.Error)?) -> ())
  @objc public func sendEvent(publicUserId: Swift.String?, eventType: Keyri.EventType, success: Swift.Bool, completion: @escaping (Keyri.FingerprintResponse?, (any Swift.Error)?) -> ())
  @objc public func createFingerprint(completion: @escaping (Keyri.FingerprintRequest?, (any Swift.Error)?) -> ())
  @objc public func initiateQrSession(sessionId: Swift.String, publicUserId: Swift.String?, completion: @escaping (Keyri.Session?, (any Swift.Error)?) -> ())
  @objc public func login(publicUserId: Swift.String?, completion: @escaping (Keyri.LoginObject?, (any Swift.Error)?) -> ())
  @objc public func register(publicUserId: Swift.String?, completion: @escaping (Keyri.RegisterObject?, (any Swift.Error)?) -> ())
  @objc public func initializeDefaultConfirmationScreen(session: Keyri.Session, payload: Swift.String, completion: @escaping (Swift.Bool, (any Swift.Error)?) -> ())
  @objc public func processLink(url: Foundation.URL, payload: Swift.String, publicUserId: Swift.String? = nil, completion: @escaping (Swift.Bool, (any Swift.Error)?) -> ())
  @objc deinit
}
@objc public class MobileTemplateResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public var mobile: Keyri.Template?
  @objc public var widget: Keyri.Template?
  @objc public var userAgent: Keyri.UserAgent?
  @objc public var flags: Keyri.Flags?
  @objc public var title: Swift.String
  @objc public var message: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class Template : ObjectiveC.NSObject, Swift.Codable {
  @objc public var location: Swift.String?
  @objc public var issue: Swift.String?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public class UserAgent : ObjectiveC.NSObject, Swift.Codable {
  @objc public var name: Swift.String
  @objc public var issue: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public class Flags : ObjectiveC.NSObject, Swift.Codable {
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
open class KeyriInterface {
  public struct Constants {
    public static let ANON_USER: Swift.String
  }
  public init(appKey: Swift.String, publicApiKey: Swift.String? = nil, serviceEncryptionKey: Swift.String? = nil, detectionsConfig: Keyri.KeyriDetectionsConfig = KeyriDetectionsConfig())
  @available(*, deprecated, message: "Use constructor with detectionsConfig param instead")
  convenience public init(appKey: Swift.String, publicApiKey: Swift.String? = nil, serviceEncryptionKey: Swift.String? = nil, blockEmulatorDetection: Swift.Bool = true)
  public func easyKeyriAuth(payload: Swift.String, publicUserId: Swift.String?, completion: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> ())
  public func generateAssociationKey(publicUserId: Swift.String = Constants.ANON_USER, completion: @escaping (Swift.Result<CryptoKit.P256.Signing.PublicKey, any Swift.Error>) -> ())
  public func generateUserSignature(publicUserId: Swift.String = Constants.ANON_USER, data: Foundation.Data, completion: @escaping (Swift.Result<CryptoKit.P256.Signing.ECDSASignature, any Swift.Error>) -> ())
  public func listAssociationKeys(completion: @escaping (Swift.Result<[Swift.String : Swift.String]?, any Swift.Error>) -> ())
  public func listUniqueAccounts(completion: @escaping (Swift.Result<[Swift.String : Swift.String]?, any Swift.Error>) -> ())
  public func getAssociationKey(publicUserId: Swift.String = Constants.ANON_USER, completion: @escaping (Swift.Result<CryptoKit.P256.Signing.PublicKey?, any Swift.Error>) -> ())
  public func removeAssociationKey(publicUserId: Swift.String, completion: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> ())
  public func sendEvent(publicUserId: Swift.String = Constants.ANON_USER, eventType: Keyri.EventType = EventType.visits(), success: Swift.Bool = true, completion: @escaping (Swift.Result<Keyri.FingerprintResponse, any Swift.Error>) -> ())
  public func createFingerprint(completion: @escaping (Swift.Result<Keyri.FingerprintRequest, any Swift.Error>) -> ())
  public func initiateQrSession(sessionId: Swift.String, publicUserId: Swift.String?, completion: @escaping (Swift.Result<Keyri.Session, any Swift.Error>) -> Swift.Void)
  public func login(publicUserId: Swift.String?, completion: @escaping (Swift.Result<Keyri.LoginObject, any Swift.Error>) -> ())
  public func register(publicUserId: Swift.String?, completion: @escaping (Swift.Result<Keyri.RegisterObject, any Swift.Error>) -> ())
  public func getCorrectedTimestampSeconds(completion: @escaping (Foundation.TimeInterval) -> ())
  public func initializeDefaultConfirmationScreen(session: Keyri.Session, payload: Swift.String, completion: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> ())
  public func processLink(url: Foundation.URL, payload: Swift.String, publicUserId: Swift.String?, completion: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> ())
  @objc deinit
}
@objc public class Session : ObjectiveC.NSObject, Swift.Codable {
  @objc public var publicUserId: Swift.String?
  @objc public var appKey: Swift.String?
  @objc public var sessionId: Swift.String
  @objc public func confirm(payload: Swift.String, trustNewBrowser: Swift.Bool = false, completion: @escaping ((any Swift.Error)?) -> ())
  @objc public func deny(payload: Swift.String, completion: @escaping ((any Swift.Error)?) -> ())
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public class WidgetUserAgent : ObjectiveC.NSObject, Swift.Codable {
  @objc public var os: Swift.String
  @objc public var browser: Swift.String
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers open class ConfirmationScreenUIView : ObjectiveC.NSObject {
  public var vc: SwiftUI.UIHostingController<Keyri.ConfirmationScreen>
  public init(session: Keyri.Session, payload: Swift.String, completion: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> ())
  @objc deinit
}
@objc public class RegisterObject : ObjectiveC.NSObject, Swift.Decodable, Swift.Encodable {
  @objc public var publicKey: Swift.String
  @objc public var userId: Swift.String
  public init(publicKey: Swift.String, userId: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class LocationData : ObjectiveC.NSObject, Swift.Codable {
  @objc public var countryCode: Swift.String?
  @objc public var city: Swift.String?
  @objc public var continentCode: Swift.String?
  @objc public var regionCode: Swift.String?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct ConfirmationScreen : SwiftUI.View {
  public var dismissalAction: ((Swift.Bool) -> ())?
  public init(session: Keyri.Session, payload: Swift.String)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s5Keyri18ConfirmationScreenV4bodyQrvp", 0) __
}
@objc @_hasMissingDesignatedInitializers public class FingerprintRequest : ObjectiveC.NSObject, Swift.Decodable, Swift.Encodable {
  @objc final public let clientEncryptionKey: Swift.String?
  @objc final public let encryptedPayload: Swift.String?
  @objc final public let salt: Swift.String?
  @objc final public let iv: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers public class EventType : ObjectiveC.NSObject {
  @objc final public let name: Swift.String
  @objc public var metadata: [Swift.String : Any]?
  @objc public static func visits(metadata: [Swift.String : Any]? = nil) -> Keyri.EventType
  @objc public static func login(metadata: [Swift.String : Any]? = nil) -> Keyri.EventType
  @objc public static func signup(metadata: [Swift.String : Any]? = nil) -> Keyri.EventType
  @objc public static func attachNewDevice(metadata: [Swift.String : Any]? = nil) -> Keyri.EventType
  @objc public static func emailChange(metadata: [Swift.String : Any]? = nil) -> Keyri.EventType
  @objc public static func profileUpdate(metadata: [Swift.String : Any]? = nil) -> Keyri.EventType
  @objc public static func passwordReset(metadata: [Swift.String : Any]? = nil) -> Keyri.EventType
  @objc public static func withdrawal(metadata: [Swift.String : Any]? = nil) -> Keyri.EventType
  @objc public static func deposit(metadata: [Swift.String : Any]? = nil) -> Keyri.EventType
  @objc public static func purchase(metadata: [Swift.String : Any]? = nil) -> Keyri.EventType
  @objc public static func custom(name: Swift.String, metadata: [Swift.String : Any]? = nil) -> Keyri.EventType
  @objc deinit
}
@objc public class FingerprintResponse : ObjectiveC.NSObject, Swift.Decodable, Swift.Encodable {
  @objc final public let apiCiphertextSignature: Swift.String?
  @objc final public let publicEncryptionKey: Swift.String?
  @objc final public let ciphertext: Swift.String?
  @objc final public let iv: Swift.String?
  @objc final public let salt: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class RiskAnalytics : ObjectiveC.NSObject, Swift.Codable {
  @objc public var riskStatus: Swift.String?
  @objc public var riskFlagString: Swift.String?
  @objc public var geoData: Keyri.GeoDataPair?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public class KeyriDetectionsConfig : ObjectiveC.NSObject {
  @objc public init(blockEmulatorDetection: Swift.Bool = true, blockRootDetection: Swift.Bool = false, blockDangerousAppsDetection: Swift.Bool = false, blockTamperDetection: Swift.Bool = false, blockSwizzleDetection: Swift.Bool = false)
  @objc deinit
}
@objc public class LoginObject : ObjectiveC.NSObject, Swift.Decodable, Swift.Encodable {
  @objc public var timestampNonce: Swift.String
  @objc public var signature: Swift.String
  @objc public var publicKey: Swift.String
  @objc public var userId: Swift.String
  public init(timestampNonce: Swift.String, signature: Swift.String, publicKey: Swift.String, userId: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
